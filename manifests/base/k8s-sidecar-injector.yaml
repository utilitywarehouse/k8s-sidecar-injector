apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-sidecar-injector
  labels:
    app.kubernetes.io/name: k8s-sidecar-injector
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-sidecar-injector
  labels:
    app.kubernetes.io/name: k8s-sidecar-injector
spec:
  type: ClusterIP
  # NOTE(gabe): because of how MutatingWebhookConfigurations work, we MUST set this to have a clusterip
  # to avoid the thiccc chains of
  # W0802 14:53:36.704545       1 admission.go:253] Failed calling webhook, failing open injector.tumblr.com: failed calling admission webhook "injector.tumblr.com": Post https://k8s-sidecar-injector-prod.sre-sys.svc:443/mutate: cannot route to service with ClusterIP "None"
  # E0802 14:53:36.704610       1 admission.go:254] failed calling admission webhook "injector.tumblr.com": Post https://k8s-sidecar-injector-prod.sre-sys.svc:443/mutate: cannot route to service with ClusterIP "None"
  #clusterIP: None
  ports:
    - name: https
      port: 443
      targetPort: https
      protocol: TCP
    - name: http-metrics
      port: 80
      targetPort: http-metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: k8s-sidecar-injector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "k8s-sidecar-injector"
  labels:
    app.kubernetes.io/name: k8s-sidecar-injector
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-sidecar-injector
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k8s-sidecar-injector
    spec:
      serviceAccountName: k8s-sidecar-injector
      volumes:
        - name: configs
          configMap:
            name: k8s-sidecar-injector-configs
        - name: secrets
          secret:
            secretName: k8s-sidecar-injector-webhook-server-cert 
      containers:
        - name: "k8s-sidecar-injector"
          image: quay.io/utilitywarehouse/k8s-sidecar-injector:v0.6.0
          command: ["entrypoint.sh"]
          args: []
          ports:
            - name: https
              containerPort: 9443
            - name: http-metrics
              containerPort: 9000
          volumeMounts:
            - name: configs
              mountPath: /conf
            - name: secrets
              mountPath: /var/lib/secrets
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /health
              port: https
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          resources:
            requests:
              cpu: 0m
              memory: 1Gi
            limits:
              cpu: 500m
              memory: 2Gi
          env:
            - name: "TLS_CERT_FILE"
              value: "/var/lib/secrets/tls.crt"
            - name: "TLS_KEY_FILE"
              value: "/var/lib/secrets/tls.key"
            - name: "LOG_LEVEL"
              value: "2"
            - name: "CONFIG_DIR"
              value: "/conf"
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: "tumblr-sidecar-injector-webhook"
  labels:
    app.kubernetes.io/name: k8s-sidecar-injector
webhooks:
  - name: "injector.tumblr.com"
    failurePolicy: "Ignore" # we fail "open" if the webhook is down hard
    # You may want to ignore kube-system to prevent disrupting key services
    # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#avoiding-operating-on-the-kube-system-namespace
    namespaceSelector:
      matchExpressions:
        - key: injector.tumblr.com/ignore
          operator: DoesNotExist
    admissionReviewVersions: ["v1"]
    sideEffects: None
    timeoutSeconds: 5
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    clientConfig:
      # https://github.com/kubernetes/kubernetes/blob/v1.10.0-beta.1/staging/src/k8s.io/api/admissionregistration/v1beta1/types.go#L218
      # note: k8s is smart enough to use 443 or the only exposed port on the service
      # note: this requires the service to serve TLS directly (not thru ingress)
      service:
        name: "k8s-sidecar-injector"
        path: "/mutate" # what /url/slug to send requests at
